# backend/models/user.py - UPDATED CODE

# This file defines the Pydantic model for the User document
# based on the technical design document's schema for the 'users' collection.

import datetime # For Date fields
from typing import Optional, List, Dict, Any, Annotated # Import necessary types
from pydantic import BaseModel, Field # Import Pydantic BaseModel and Field
from pydantic_core import core_schema # Import core_schema for ObjectId validation

# For handling MongoDB's ObjectId
from bson import ObjectId

# --- Custom Type for handling MongoDB ObjectId ---
# This allows Pydantic to validate an ObjectId or a string that can be
# converted to an ObjectId, and ensures it's represented as a string when exported (e.g., to JSON).
PyObjectId = Annotated[
    ObjectId,
    core_schema.
    no_info_plain_validator_function(str) # Add a validator that converts ObjectId to str during validation/dump
]

# --- User Model ---
# Defines the structure and data types for a User document in MongoDB.
# Uses Pydantic for data validation.
class User(BaseModel):
    """
    Represents a user document in the MongoDB 'users' collection.
    """
    # MongoDB ObjectId (_id) - Handled by PyObjectId type
    # Use Field(default_factory=ObjectId) for creating *new* documents,
    # but allow reading from an existing ObjectId or string.
    id: Optional[PyObjectId] = Field(alias="_id", default=None) # Use 'id' as the field name in Python for the document ID, but map it to '_id' in MongoDB. It's Optional because the ID is generated by MongoDB on insertion.

    email: str = Field(..., unique=True, index=True) # Required string, unique, indexed
    password_hash: str = Field(...) # Required string (hashed password)
    username: str = Field(..., unique=True, index=True) # Required string, unique, indexed
    role: str = Field(..., index=True) # Required string (e.g., "admin", "free", "premium"), indexed
    subscription_status: str = Field(...) # Required string (e.g., "active", "inactive", "trialing", "cancelled")
    subscription_plan: Optional[str] = Field(default=None) # Optional string (e.g., "monthly", "annually")
    subscription_start_date: Optional[datetime.datetime] = Field(default=None) # --- ADDED: Optional Date/datetime for current subscription start
    subscription_end_date: Optional[datetime.datetime] = Field(default=None) # Optional Date/datetime field for current subscription end
    subscription_history: List[Dict[str, Any]] = Field(default_factory=list) # --- ADDED: List of dictionaries for past subscriptions
    # Example structure for history items:
    # [{"plan": "monthly", "start_date": "...", "end_date": "...", "status": "cancelled"}]

    registration_date: datetime.datetime = Field(...) # Required Date/datetime field (Timestamp of registration)
    last_login: Optional[datetime.datetime] = Field(default=None) # Optional Date/datetime field (Timestamp of last login)
    email_confirmed: bool = Field(default=False) # Required boolean (False by default on creation, True after confirmation) - Added default False as it makes sense for a new user
    email_confirmation_token: Optional[str] = Field(default=None) # Optional string (nullable), used for email confirmation
    password_reset_token: Optional[str] = Field(default=None) # Optional string (nullable), used for password reset
    favorite_teams: List[str] = Field(default_factory=list) # List of strings, default to empty list
    favorite_leagues: List[str] = Field(default_factory=list) # List of strings, default to empty list
    notification_preferences: Dict[str, Any] = Field(default_factory=dict) # Object/dictionary, default to empty dict
    prediction_history: List[Dict[str, Any]] = Field(default_factory=list) # Array of objects, default to empty list
    # Note: prediction_history objects in the design mention match_id (ObjectId) and access_timestamp (Date)
    # You might want more specific Pydantic models for nested objects like this in the future,
    # but Dict[str, Any] is sufficient for now.
    referral_code: Optional[str] = Field(default=None, unique=True, index=True) # Optional string (nullable), unique, indexed
    referred_by: Optional[PyObjectId] = Field(alias="referred_by", default=None, index=True) # Optional ObjectId reference to another user's _id, indexed
    referral_rewards_earned: float = Field(default=0.0) # Number (float), default to 0.0

    # Pydantic Model Configuration
    model_config = {
        "populate_by_name": True, # Allows accessing fields by name (e.g., user.id instead of user._id)
        "arbitrary_types_allowed": True, # Allows custom types like ObjectId and datetime
        "json_schema_extra": { # Optional: Add example data for OpenAPI docs
            "example": {
                "_id": "65f2a5b1b3727d9c4a7e1a0b", # Example ObjectId string
                "email": "user@example.com",
                "password_hash": "hashedpasswordstring...",
                "username": "example_user",
                "role": "free",
                "subscription_status": "active", # Example active subscription
                "subscription_plan": "monthly",
                "subscription_start_date": "2024-10-27T10:00:00.000Z", # Example start date
                "subscription_end_date": "2024-11-27T10:00:00.000Z", # Example end date
                "subscription_history": [ # Example history entry
                     {"plan": "trial", "start_date": "2024-09-01T09:00:00.000Z", "end_date": "2024-09-08T09:00:00.000Z", "status": "expired"}
                ],
                "registration_date": "2023-01-01T10:00:00.000Z", # ISO 8601 format for dates
                "last_login": "2023-10-27T15:30:00.000Z",
                "email_confirmed": True, # Example confirmed user
                "email_confirmation_token": None,
                "password_reset_token": None,
                "favorite_teams": ["Arsenal", "Barcelona"],
                "favorite_leagues": ["Premier League", "La Liga"],
                "notification_preferences": {"alerts_on_favorites": True, "newsletter_opt_in": False},
                "prediction_history": [
                     {"match_id": "65f2a5b1b3727d9c4a7e1a0c", "access_timestamp": "2023-10-27T16:00:00.000Z"}
                ],
                "referral_code": "USER123ABC",
                "referred_by": None,
                "referral_rewards_earned": 0.0
            }
        }
    }

    # --- Optional: Validator for ObjectId fields ---
    # The PyObjectId type handles the conversion to string on export automatically.
    # You might add more complex validators here if needed (e.g., for email format, role values).